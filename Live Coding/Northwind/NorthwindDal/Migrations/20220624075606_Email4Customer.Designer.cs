// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NorthwindDal.Model;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NorthwindDal.Migrations
{
    [DbContext(typeof(NorthwindContext))]
    [Migration("20220624075606_Email4Customer")]
    partial class Email4Customer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NorthwindDal.Model.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("customer_id");

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("city");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("company_name");

                    b.Property<string>("ContactName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("contact_title");

                    b.Property<string>("Country")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("country");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("fax");

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Region")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("region");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("CustomerId");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("NorthwindDal.Model.Order", b =>
                {
                    b.Property<short>("OrderId")
                        .HasColumnType("smallint")
                        .HasColumnName("order_id");

                    b.Property<string>("CustomerId")
                        .HasColumnType("string")
                        .HasColumnName("customer_id");

                    b.Property<short?>("EmployeeId")
                        .HasColumnType("smallint")
                        .HasColumnName("employee_id");

                    b.Property<float?>("Freight")
                        .HasColumnType("real")
                        .HasColumnName("freight");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("order_date");

                    b.Property<DateOnly?>("RequiredDate")
                        .HasColumnType("date")
                        .HasColumnName("required_date");

                    b.Property<string>("ShipAddress")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ship_address");

                    b.Property<string>("ShipCity")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("ship_city");

                    b.Property<string>("ShipCountry")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("ship_country");

                    b.Property<string>("ShipName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("ship_name");

                    b.Property<string>("ShipPostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ship_postal_code");

                    b.Property<string>("ShipRegion")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("ship_region");

                    b.Property<short?>("ShipVia")
                        .HasColumnType("smallint")
                        .HasColumnName("ship_via");

                    b.Property<DateOnly?>("ShippedDate")
                        .HasColumnType("date")
                        .HasColumnName("shipped_date");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("NorthwindDal.Model.OrderDetail", b =>
                {
                    b.Property<short>("OrderId")
                        .HasColumnType("smallint")
                        .HasColumnName("order_id");

                    b.Property<short>("ProductId")
                        .HasColumnType("smallint")
                        .HasColumnName("product_id");

                    b.Property<float>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint")
                        .HasColumnName("quantity");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real")
                        .HasColumnName("unit_price");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("pk_order_details");

                    b.HasIndex("ProductId");

                    b.ToTable("order_details", (string)null);
                });

            modelBuilder.Entity("NorthwindDal.Model.Product", b =>
                {
                    b.Property<short>("ProductId")
                        .HasColumnType("smallint")
                        .HasColumnName("product_id");

                    b.Property<short?>("CategoryId")
                        .HasColumnType("smallint")
                        .HasColumnName("category_id");

                    b.Property<int>("Discontinued")
                        .HasColumnType("integer")
                        .HasColumnName("discontinued");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("product_name");

                    b.Property<string>("QuantityPerUnit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("quantity_per_unit");

                    b.Property<short?>("ReorderLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("reorder_level");

                    b.Property<short?>("SupplierId")
                        .HasColumnType("smallint")
                        .HasColumnName("supplier_id");

                    b.Property<float?>("UnitPrice")
                        .HasColumnType("real")
                        .HasColumnName("unit_price");

                    b.Property<short?>("UnitsInStock")
                        .HasColumnType("smallint")
                        .HasColumnName("units_in_stock");

                    b.Property<short?>("UnitsOnOrder")
                        .HasColumnType("smallint")
                        .HasColumnName("units_on_order");

                    b.HasKey("ProductId");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("NorthwindDal.Model.Order", b =>
                {
                    b.HasOne("NorthwindDal.Model.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_orders_customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("NorthwindDal.Model.OrderDetail", b =>
                {
                    b.HasOne("NorthwindDal.Model.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("fk_order_details_orders");

                    b.HasOne("NorthwindDal.Model.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("fk_order_details_products");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NorthwindDal.Model.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("NorthwindDal.Model.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("NorthwindDal.Model.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
